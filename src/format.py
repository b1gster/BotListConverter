import json
import re

from datetime import datetime

ID64_MAGIC_NUMBER = 76561197960265728
TF2BD_ATTRIBUTES = ["cheater", "suspicious", "exploiter", "racist"]

##### FORMATTERS #####

def format_ncc(list: list) -> list:
    return [f"{i} - {i}" for i in list]

def format_cathook(list: list) -> list:
    return [f"cat_pl_add_id {cvt(int(i), 'STEAMID3-N')} RAGE" for i in list]

def format_amalgam(data, tag="Bot"):
    if isinstance(data, list):
        adjusted_ids = {cvt(int(i), "STEAMID3-N"): [tag] for i in data}
    elif isinstance(data, dict):
        adjusted_ids = {}
        for category, ids in data.items():
            for i in ids:
                adjusted_ids[cvt(int(i), "STEAMID3-N")] = [category]
    else:
        raise ValueError("Input must be a list or dict")
    formatted_json = json.dumps(adjusted_ids, indent=4)
    return formatted_json

def format_lbox(list: list, priority: int) -> str:
    if priority in [0, 1]:
        print("WARNING: Invalid priority assigned, changing to 2...")
        priority = 2
    if priority < -1:
        priority = -1
    if priority > 10:
        priority = 10

    ret = ""
    for i in list:
        ret += f"{dec_to_hex(cvt(i, 'STEAMID3-N'))};{priority};"
    return ret

def format_lua(ids, priorities, listname="Error"):
    def adjust_priority(priority):
        if priority in [0, 1]:
            print("WARNING: Invalid priority assigned, changing to 2...")
            return 2
        return max(-1, min(10, priority))

    def write_ids(ids, priority):
        return "".join(f'playerlist.SetPriority("{cvt(i, "STEAMID2")}",{priority})\n' for i in ids)
    
    def dict_len(d):
        lengths = {k: len(v) for k, v in d.items()}
        total = sum(lengths.values())
        lengths["total"] = total
        return lengths

    now = datetime.now()
    header =  f"---@diagnostic disable: undefined-global\n"
    header += f"--[[ auto-priority script made by Pianta's BotListConverter ]]\n"
    header += f"--[[ generated at {now.strftime('%d-%b-%y %a')} ]]\n"

    ret = header
    total_ids = 0

    if isinstance(ids, dict):
        ret += "\n"
        ln = dict_len(ids)
        for cat, count in ln.items():
            if cat == "total": # skip total count
                continue

            ret += f"-- {cat} has {count} IDs and priority {priorities[cat]}\n"
        ret += f"-- {ln['total']} IDs in total\n\n"
        for category, id_list in ids.items():
            priority = adjust_priority(priorities[category])
            ret += f"-- {category}\n\n"
            ret += write_ids(id_list, priority)
            ret += "\n"
            total_ids += len(id_list)
        ret += f"\nprint(\"{len(ids)} categories processed.\")\n"
    else:
        priority = adjust_priority(priorities)
        ret += f"\n-- {listname} has {len(ids)} IDs and priority {priority}\n\n"
        ret += write_ids(ids, priority)
        total_ids = len(ids)

    ret += f"\nprint(\"{total_ids} players added.\")"
    return ret

def format_tf2bd(ids, listname="Bot", attrib_idx=1, proof="generated by BotListConverter"):
    for idx, single_attribute in enumerate(TF2BD_ATTRIBUTES):
        print(f"{idx + 1}. {single_attribute}")
        
    attrib_idx = int(input(f"Which label do you want to assign for the '{listname}' list? "))
    attributes = TF2BD_ATTRIBUTES[attrib_idx - 1]
    
    players = []
    for id in ids:
        id32 = cvt(id, "STEAMID3-B")
        players.append({
            "attributes": [attributes],
            "proof": [proof],
            "steamid": id32
        })
    
    data = {
        "$schema": "https://raw.githubusercontent.com/PazerOP/tf2_bot_detector/master/schemas/v3/playerlist.schema.json",
        "file_info": {
            "authors": ["Pianta's BotListConverter"],
            "description": f"generated by BotListConverter - list '{listname}'",
            "title": "BotListConverter",
        },
        "players": players
    }
    
    return json.dumps(data, indent=4)

##### UTILS #####

def merge_dict_ids(d, name):
    merged_list = []
    for value in d.values():
        if isinstance(value, list):
            merged_list.extend(value)
        else:
            merged_list.append(value)
    
    merged_dict = {name: merged_list}
    return merged_dict

def merge_dicts(dicts):
    merged = {}
    for d in dicts:
        for key, value in d.items():
            if key in merged:
                merged[key].extend(value)
            else:
                merged[key] = value
    return merged

def detect_id_type(id: str|int) -> str|None:
    if isinstance(id, int) or id.isdigit():
        if int(id) >= ID64_MAGIC_NUMBER:
            return "STEAMID64"
        else:
            return "STEAMID3-N"
    elif isinstance(id, str):
        if id.startswith("STEAM_0"):
            return "STEAMID2"
        elif id.startswith("[U:1:"):
            return "STEAMID3-B"
        else:
            return None
    else:
        return None

def cvt(id: str|int, tgt: str) -> str|int:
    idtype = detect_id_type(id)

    # no conversion needed
    if idtype == tgt:
        if idtype in ["STEAMID3-N", "STEAMID64"]:
            return int(id)
        return id
    
    id64 = None

    # convert to id64 (easier to convert)
    if idtype == "STEAMID2":
        m = re.search(r"STEAM_0:(\d):(\d+)", id)
        y = m.group(1)
        accnum = int(m.group(2))
        id64 = ID64_MAGIC_NUMBER + (2 * accnum) + int(y)
    elif idtype == "STEAMID3-N":
        id64 = ID64_MAGIC_NUMBER + int(id)
    elif idtype == "STEAMID3-B":
        m = re.search(r"\[U:1:(\d+)\]", id)
        id64 = ID64_MAGIC_NUMBER + int(m.group(1))
    elif idtype == "STEAMID64":
        id64 = int(id)
    elif idtype == None:
        raise ValueError(f"Unknown ID type: {id}")

    id64 = int(id64)

    # convert to target format
    if tgt == "STEAMID2":
        account_id = id64 - ID64_MAGIC_NUMBER
        y = account_id % 2
        z = (account_id - y) // 2
        return f"STEAM_0:{y}:{z}"
    elif tgt == "STEAMID3-N":
        return id64 - ID64_MAGIC_NUMBER
    elif tgt == "STEAMID3-B":
        return f"[U:1:{id64 - ID64_MAGIC_NUMBER}]"
    elif tgt == "STEAMID64":
        return id64
    else:
        return None

def dec_to_hex(num):
    hex_str = hex(num)[2:]
    return hex_str

def remove_duplicates(input_data):
    if isinstance(input_data, dict):
        return {key: list(set(value)) for key, value in input_data.items()}
    elif isinstance(input_data, list):
        return list(set(input_data))
    else:
        raise TypeError("Input must be a dict or list")
