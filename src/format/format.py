from datetime import datetime
import json

ID64_MAGIC_NUMBER = 76561197960265728
TF2BD_ATTRIBUTES = ["cheater", "suspicious", "exploiter", "racist"]

##### REPEATED CALLERS #####

def _format_ncc(string: str) -> str:
    return f"{string} - {string}"

def _format_cathook(string: str) -> str:
    return f"cat_pl_add_id {int(string) - ID64_MAGIC_NUMBER} RAGE"

##### FORMATTERS #####

def format_ncc_list(list: list) -> list:
    return [_format_ncc(i) for i in list]

def format_cathook_list(list: list) -> list:
    return [_format_cathook(i) for i in list]

def format_amalgam(data, tag="Bot"):
    if isinstance(data, list):
        adjusted_ids = {str(int(i) - ID64_MAGIC_NUMBER): [tag] for i in data}
    elif isinstance(data, dict):
        adjusted_ids = data
    else:
        raise ValueError("Input must be a list or dict")
    formatted_json = json.dumps(adjusted_ids, indent=4)
    return formatted_json

def format_lbox_list(list: list, priority: int) -> str:
    if priority in [0, 1]:
        print("WARNING: Invalid priority assigned, changing to 2...")
        priority = 2
    if priority < -1:
        priority = -1
    if priority > 10:
        priority = 10

    ret = ""
    for i in list:
        ret += f"{dec_to_hex(int(i) - ID64_MAGIC_NUMBER)};{priority};"
    return ret

def format_lua_list(ids, priorities, is_dict=False, listname="Error"):
    def adjust_priority(priority):
        if priority in [0, 1]:
            print("WARNING: Invalid priority assigned, changing to 2...")
            return 2
        return max(-1, min(10, priority))

    def write_ids(ids, priority):
        ret = ""
        for i in ids:
            ret += f"playerlist.SetPriority(\"{id64_to_id2(int(i))}\",{priority})\n"
        return ret
    
    def dict_len(d):
        lengths = {k: len(v) for k, v in d.items()}
        total = sum(lengths.values())
        lengths["total"] = total
        return lengths

    now = datetime.now()
    header = "--[[ auto-priority script made by Pianta's BotListConverter ]]\n"
    header += f"--[[ generated at {now.strftime('%d-%b-%y %a')} ]]\n"

    ret = header
    total_ids = 0

    if is_dict:
        ret += "\n"
        ln = dict_len(ids)
        for cat, count in ln.items():
            if cat == "total": # skip total count
                continue

            ret += f"-- {cat} has {count} IDs\n"
        ret += f"\n-- {ln['total']} IDs in total\n"
        for category, id_list in ids.items():
            priority = adjust_priority(priorities[category])
            ret += f"\n-- {category}\n\n"
            ret += write_ids(id_list, priority)
            ret += "\n"
            total_ids += len(id_list)
        ret += f"\nprint(\"{len(ids)} categories processed.\")\n"
    else:
        priority = adjust_priority(priorities)
        ret += f"\n-- {listname}\n\n"
        ret += write_ids(ids, priority)
        total_ids = len(ids)

    ret += f"\nprint(\"{total_ids} players added.\")"
    return ret

def format_tf2bd_list(ids, listname = "Bot", attribute_index = 1, proof = "generated by BotListConverter"):
    for idx, single_attribute in enumerate(TF2BD_ATTRIBUTES):
        print(f"{idx + 1}. {single_attribute}")
        
    attribute_index = int(input(f"Which label do you want to assign for the '{listname}' list? "))
    attributes = TF2BD_ATTRIBUTES[attribute_index - 1]
    
    players = []
    for steam_id in ids:
        steam_id_32 = int(steam_id) - ID64_MAGIC_NUMBER
        players.append({
            "attributes": [attributes],
            "proof": [proof],
            "steamid": f"[U:1:{steam_id_32}]"
        })
    
    data = {
        "$schema": "https://raw.githubusercontent.com/PazerOP/tf2_bot_detector/master/schemas/v3/playerlist.schema.json",
        "file_info": {
            "authors": ["Pianta's BotListConverter"],
            "description": f"generated by BotListConverter - list '{listname}'",
            "title": "autogen"
        },
        "players": players
    }
    
    return json.dumps(data, indent=4)

##### UTILS #####

def merge_dict_ids(d, name):
    merged_list = []
    for value in d.values():
        if isinstance(value, list):
            merged_list.extend(value)
        else:
            merged_list.append(value)
    
    merged_dict = {name: merged_list}
    return merged_dict

def merge_dicts(dicts):
    merged = {}
    for d in dicts:
        for key, value in d.items():
            if key in merged:
                merged[key].extend(value)
            else:
                merged[key] = value
    return merged

def id64_to_id2(steamid64):
    account_id = steamid64 - ID64_MAGIC_NUMBER
    y = account_id % 2
    z = (account_id - y) // 2
    return f"STEAM_0:{y}:{z}"

def dec_to_hex(num):
    hex_str = hex(num)[2:]
    return hex_str

def remove_duplicates_dict(input_dict):
    output_dict = {}
    for key, value in input_dict.items():
        output_dict[key] = list(set(value))
    return output_dict

def remove_duplicates_list(input_list):
    return list(set(input_list))
